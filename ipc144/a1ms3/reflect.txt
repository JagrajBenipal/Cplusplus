*****************************************************************************
                               Reflection
                             Milestone - #2
Full Name   : Jagraj Singh Benipal
Student ID# : 156374217

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************

1.This milestone wanted me to create additional functions that were not specified or provided. Ex:
void (struct ClinicData* data) void selectionSort:
This function can be used to sort the data records in the appointment list into ascending order in the viewAllAppointments function. I constructed two for loops in the selectionSort function to carry out the sorting procedures, each using a separate iteration variable i and j (beginning from i+1). First, I need to check whether the patient number in the appointment structure is equal to zero. If the patient number is zero, this signifies the record is blank. Start the iteration and compare the appointment date if the value is non-zero.
int checkAppointmentDate(struct Appointment* appoint, const struct Date* date, const struct Time* time):
This function can be used to prompt the user for the date (year, month, and day), as well as the time (hour and minutes), and then check if the date entered matches the appointment list. This function will return -1 if an identical record can be located, else it will return 1. If this function returns 1, it means no similar records were located, and the input date and time can be used to add this appointment to the calendar. If this function returns 1, the user should be informed that the appointment list is filled.
int findIndexFromAppointment(struct Appointment* appoint, int patientNum):
The patient number can be used to find the index number in the appointment array using this function. First, this function will prompt the user to enter the patient number, and it will check to see if the format of the patient number is valid, and if it has four digits. The system will then check whether or not this patient number is on the appointment list. If this number is not discovered in the list, the user will be prompted with an error message. If this number was located in the appointment list, the value of index will be stored in an integer array and one integer value will be returned to the main function.

2. I developed roughly 120 lines of code for this function before using pattern recognition and functions. The amount of lines of code was decreased to around 70 when I used that strategy. Because it may be used in the "addAppointment" and "viewAppointmentSchedule" functions, the input of year, month, and day can be combined into a function. Both of them required the same inputs (year, month and day). This logic had to deal with the leap year, which involves checking whether February has 28 or 29 days every four years. In addition, I believe it would be better to add another function to check the time input (hour and minutes). Also, I simplified the logic for locating a related record based on the year, month, day, hour, and minute inputs. This can combine many lines of "if" case logic for determining whether the inputs are included in the current appointment records. If the appointment timeslot is not available, return a value of "-1" and print a statement. In addition, I created a function to link the appointment record with the available timeslot in the appointment structure. This function might potentially save up to ten lines of code.

3. This milestone has a lot of material that needs to be dealt with. First, on Monday, I spent around 45 minutes studying the entire A1MS3.pdf file to learn all of the milestone's requirements and specifics, and I brainstormed a complete picture of the milestone. On Tuesday, I attempted to break down the entire milestone into smaller chunks. This means I'll have to track down all of the "To Do(s)" items in the source c and header files, as the templates files have already listed all of the areas where I'll have to code. I discovered that using the "importAppointments" function is more convenient; all of the data in the appointment.txt file is formatted and separated by commas. However, when I tried to find out how to read data from the patient.txt file, I found the "importPatients" function to be rather difficult. It's because I can't simply read the data into the patient structure with "%d|%c|%c|%c".  To provide the delimiter pipe, I must use the regular expression format, and the length of each patient's name varies. This function took me around 2 hours to complete. I worked on "viewAllAppointments" on Wednesday. It was particularly difficult because the data had to be sorted. The sorting algorithm is something I'm not familiar with. I worked on the "viewAppointmentSchedule" feature on Thursday; it is not tough. I finished it in half an hour. The "addAppointment" function is the most difficult aspect of this milestone. Before the new appointment can be added to the structures, a handful of operations must be completed. This function consumed an entire day of my time. Finally, I worked out how to add functions to deal with obtaining the exact date to add the appointment, which simplified the coding in "addAppointment." I worked on the "removeAppointment" function on Friday, and it was not difficult to accomplish; it took me about an hour. After finding the record, I used "findPatientIndexByPatientNum" and "displayPatientData" to determine the outcome. So this was the Breakdown of how I spent my week of development.